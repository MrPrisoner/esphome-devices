substitutions:
  relay_pin: GPIO5
  open_pin: GPIO13
  closed_pin: GPIO14

esphome:
  name: esp8266-garage-door-2
  friendly_name: ESP8266 Garage Door 2

esp8266:
  board: esp01_1m

logger:

api:
  encryption:
    key: !secret esp8266_garagedoor2_api_encryption_key

ota:
  password: !secret esp8266_garagedoor2_ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: !secret esp8266_garagedoor2_ap_ssid
    password: !secret esp8266_garagedoor2_ap_password

captive_portal:

cover:
  - platform: template
    name: "Garage Door"
    device_class: gate
    id: door_cover
    open_action:
      - button.press: trigger_button
    close_action:
      - button.press: trigger_button
    stop_action:
      - button.press: trigger_button

binary_sensor:
  - platform: gpio
    id: cover_open
    pin: 
      number: ${open_pin}
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      delayed_on_off: 500ms
    on_state:
      - logger.log:
          format: "cover_open ${open_pin}: %d"
          args: ['x']
      - lambda: |-
          if (id(cover_open).state && !id(cover_closed).state) {
            id(door_cover).position = cover::COVER_OPEN;
            id(door_cover).current_operation = CoverOperation::COVER_OPERATION_IDLE;
            id(door_cover).publish_state();
          } else if (!id(cover_open).state && id(cover_closed).state) {
            id(door_cover).position = cover::COVER_CLOSED;
            id(door_cover).current_operation = CoverOperation::COVER_OPERATION_IDLE;
            id(door_cover).publish_state();
          }
          else if (!id(cover_open).state && !id(cover_closed).state) {
            if (id(door_cover).position == cover::COVER_OPEN) {
              id(door_cover).current_operation = CoverOperation::COVER_OPERATION_CLOSING;
              id(door_cover).publish_state();
            } else if (id(door_cover).position == cover::COVER_CLOSED) {
              id(door_cover).current_operation = CoverOperation::COVER_OPERATION_OPENING;
              id(door_cover).publish_state();
            }
          }
  - platform: gpio
    id: cover_closed
    pin: 
      number: ${closed_pin}
      inverted: true
      mode:
        input: true
        pullup: true
    filters:
      delayed_on_off: 500ms
    on_state:
      - logger.log:
          format: "cover_closed ${closed_pin}: %d"
          args: ['x']
      - lambda: |-
          if (id(cover_open).state && !id(cover_closed).state) {
            id(door_cover).position = cover::COVER_OPEN;
            id(door_cover).current_operation = CoverOperation::COVER_OPERATION_IDLE;
            id(door_cover).publish_state();
          } else if (!id(cover_open).state && id(cover_closed).state) {
            id(door_cover).position = cover::COVER_CLOSED;
            id(door_cover).current_operation = CoverOperation::COVER_OPERATION_IDLE;
            id(door_cover).publish_state();
          }
          else if (!id(cover_open).state && !id(cover_closed).state) {
            if (id(door_cover).position == cover::COVER_OPEN) {
              id(door_cover).current_operation = CoverOperation::COVER_OPERATION_CLOSING;
              id(door_cover).publish_state();
            } else if (id(door_cover).position == cover::COVER_CLOSED) {
              id(door_cover).current_operation = CoverOperation::COVER_OPERATION_OPENING;
              id(door_cover).publish_state();
            }
          }

output:
  - platform: gpio
    pin: GPIO5
    id: relay_output

button:
  - platform: output
    output: relay_output
    id: trigger_button
    entity_category: diagnostic
    disabled_by_default: true
    duration: 1000ms
    name: "Trigger"
    on_press: 
      then:
        - logger.log:
            format: "trigger_button ${relay_pin}: Triggered"
    icon: mdi:gate

  - platform: restart
    name: Restart
  - platform: safe_mode
    name: "Restart (Safe Mode)"
  - platform: shutdown
    name: Shutdown

sensor:
  - platform: uptime
    name: Uptime
    update_interval: 60s
  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""
